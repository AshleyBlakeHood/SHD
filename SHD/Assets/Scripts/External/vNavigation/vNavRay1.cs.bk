using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class vNavRay1 : MonoBehaviour
{
	public Rect scanArea = new Rect (0, 0, 10, 10);
	public int width = 30;
	public int height = 30;
	public float sizeWidth = 0.5f;
	public float sizeHeight = 0.5f;

	private Node[,] map;

	// Use this for initialization
	void Start ()
	{
		InitializeMap ();
		RayCastCheck ();
	}

	public List<Vector2> GetPath(Vector2 startPos, Vector2 endPos)
	{
		NodeBinaryHeap openList = new NodeBinaryHeap();
		List<Node> closedList = new List<Node> ();

		int startX = Mathf.RoundToInt (startPos.x / sizeWidth);
		int startY = Mathf.RoundToInt (startPos.y / sizeHeight);

		int endX = Mathf.RoundToInt (endPos.x / sizeWidth);
		int endY = Mathf.RoundToInt (endPos.y / sizeHeight);

		//Set score to 0, could set its parent to itself for path detection if needed.
		map [startX, startY].FScore = 0;
		map [startX, startY].SetParent (startX, startY);

		openList.Insert (map [startX, startY]);

		while (openList.count > 0)
		{
			Node lowestNode = openList.GetAndRemoveRoot ();

			if (lowestNode.x == endX && lowestNode.y == endY)
			{
				List<Vector2> output = new List<Vector2>();

				return CalculatePath (lowestNode, output);
			}

			//openList.RemoveAt (indexForRemove);
			closedList.Add (lowestNode);

			//Get Neighbours
			Node[] primaryNei = new Node[8];

			//Default 4
			//Left
			if (lowestNode.x > 0)
				primaryNei[0] = map[lowestNode.x - 1, lowestNode.y];

			//Right
			if (lowestNode.x < width - 1)
				primaryNei[1] = map[lowestNode.x + 1, lowestNode.y];
			//Up

			if (lowestNode.y < height - 1)
				primaryNei[2] = map[lowestNode.x, lowestNode.y + 1];

			//Down
			if (lowestNode.y > 0)
				primaryNei[3] = map[lowestNode.x, lowestNode.y - 1];

			//Advanced 4
			//Top Left
			if (lowestNode.y < height - 1 && lowestNode.x > 0)
				primaryNei[4] = map[lowestNode.x - 1, lowestNode.y + 1];

			//Bottom Left
			if (lowestNode.y > 0 && lowestNode.x > 0)
				primaryNei[5] = map[lowestNode.x - 1, lowestNode.y - 1];

			//Top Right
			if (lowestNode.y < height - 1 && lowestNode.x < width - 1)
				primaryNei[6] = map[lowestNode.x + 1, lowestNode.y + 1];

			//Bottom Right
			if (lowestNode.y > 0 && lowestNode.x < width - 1)
				primaryNei[7] = map[lowestNode.x + 1, lowestNode.y - 1];

			for (int i = 0; i < 8; i++)
			{
				//Out of bounds check.
				if (primaryNei[i] == null)
					continue;

				if (primaryNei[i].passable == false)
					continue;

				if (i >= 4)
				{
					if (DiagonalWallCheck (primaryNei[i]) == true)
						continue;
				}

				//Checks Neighbour isn't in Closed List
				if (closedList.Contains (primaryNei[i]))
					continue;

				if (openList.Contains (primaryNei[i]) == false)
				{
					//Set the parent of the neighbour to the current node.
					primaryNei[i].SetParent (lowestNode.x, lowestNode.y);

					//primaryNei[i].GScore = CalculateDistance(primaryNei[i].x, primaryNei[i].y, startX, startY);
					primaryNei[i].HScore = CalculateDistance(primaryNei[i].x, primaryNei[i].y, endX, endY);
					primaryNei[i].FScore = primaryNei[i].GScore + primaryNei[i].HScore;

					openList.Insert (primaryNei[i]);
				}
				else
				{
					//Diagonal optomisation will go here. - Actually add a working G cost.
				}

				//Add node back to map.
				map[primaryNei[i].x, primaryNei[i].y] = primaryNei[i];
			}
		}

		//Output
		List<Vector2> finalPath = new List<Vector2> ();
		return finalPath;
	}

	public void InitializeMap()
	{
		map = new Node[width,height];

		for (int x = 0; x < width; x++)
		{
			for (int y = 0; y < height; y++)
			{
				map[x, y] = new Node();

				map[x, y].x = x;
				map[x, y].y = y;
				map[x, y].passable = true;
			}
		}
	}

	public void RayCastCheck()
	{
		for (int x = 0; x < width; x++)
		{
			for (int y = 0; y < height; y++)
			{
				RaycastHit2D hit = Physics2D.Raycast (new Vector3(x * sizeWidth, y * sizeHeight, -5), new Vector3(0, 0, 1), 10);
				Debug.DrawLine (new Vector3(x * sizeWidth, y * sizeHeight, -1), new Vector3(x * sizeWidth, y * sizeHeight, 1));

				if (hit.collider != null)
				{
					if (hit.transform.gameObject.isStatic)
						map[x, y].passable = false;
				}
			}
		}
	}

	private List<Vector2> CalculatePath(Node node, List<Vector2> path)
	{
		if (!(node.x == node.parentX && node.y == node.parentY))
		{
			path.Add (new Vector2(node.x * sizeWidth, node.y * sizeHeight));
			
			CalculatePath (map[node.parentX, node.parentY], path);
		}

		return path;
	}

	public int CalculateDistance(int aX, int aY, int bX, int bY)
	{
		//Calculates and returns the Manhatten distance between two points.
		return Mathf.Abs(aX - bX) + Mathf.Abs(aY - bY);
	}

	private bool DiagonalWallCheck(Node node)
	{
		if (node.y > 0)
		{
			if (map[node.x, node.y -1].passable == false)
				return true;
		}

		if (node.y < height - 1)
		{
			if (map[node.x, node.y + 1].passable == false)
				return true;
		}

		if (node.x > 0)
		{
			if (map[node.x - 1, node.y].passable == false)
				return true;
		}

		if (node.x < width - 1)
		{
			if (map[node.x + 1, node.y].passable == false)
				return true;
		}

		return false;
	}

	void OnDrawGizmosSelected()
	{
		for (int x = 0; x < width; x++)
		{
			for (int y = 0; y < height; y++)
			{
				if (map == null)
					return;

				if (map[x, y].passable == true)
					Gizmos.color = new Color(0, 1, 0, 0.2f);
				else
					Gizmos.color = new Color(1, 0, 0, 0.2f);
				
				Gizmos.DrawCube(new Vector3(x * sizeWidth, y * sizeHeight, 0), new Vector3(sizeWidth, sizeHeight, 0));
			}
		}
	}
}

public class NodeBinaryHeap
{
	private List<Node> items = new List<Node>();

	public int count
	{
		get
		{
			return items.Count;
		}
	}

	public bool Contains(Node item)
	{
		return items.Contains (item);
	}

	public void Insert(Node item)
	{
		int i = count;
		items.Add (item);

		while (i > 0 && items[(i - 1) / 2].FScore > item.FScore)
		{
			items[i] = items[(i - 1) / 2];
			i = (i - 1) / 2;
		}

		items [i] = item;
	}

	public Node GetRoot()
	{
		return items [0];
	}

	public Node GetAndRemoveRoot()
	{
		Node root = items [0];

		Node lastItem = items [items.Count - 1];
		items.RemoveAt (items.Count - 1);

		if (items.Count > 0)
		{
			int i = 0;

			while (i < items.Count / 2)
			{
				int j = (i * 2) + 1;

				if ((j < items.Count - 1) && (items[j].FScore > items[j + 1].FScore))
				{
					j++;
				}

				if (items[j].FScore > lastItem.FScore)
					break;

				items[i] = items[j];
				i = j;
			}

			items[i] = lastItem;
		}

		return root;
	}
}

public class Node
{
	public int x;
	public int y;
	public bool passable;
	public int cost;
	public int FScore;
	public int GScore;
	public int HScore;
	
	public int parentX;
	public int parentY;
	
	public void SetCoords(int ix, int iy)
	{
		x = ix;
		y = iy;
	}
	
	public void SetParent(int x, int y)
	{
		parentX = x;
		parentY = y;
	}
}